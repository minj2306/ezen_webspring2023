-스프링 : 자바 프레임 워크
    - 프레임워크 : 여러 기능을 가진 클래스와 라이브러리가 합쳐진 형태/툴

- 스프링 셋팅
    - 인텔리제이 무료버전(커뮤니티) 스프링 프로젝트 지원 안함
    - 수업기준 : 그레이들 프로젝트
        - 그레이들[ 자동(라이브러리) 빌드 ]
    - 그레이들에 빌드할 의존성(라이브러리) 추가 [http://start.spring.id/]
        Gradle - Groovy
        Java
            Spring Boot[2.7.16]
        Java8
    -Dependencies
        Spriing Web : 스프링 웹 관련 라이브러리들을 지원
        Lombok : 롬복 [ 생성자 , getter , setter , 빌덥패턴 등등 ] 라이브러리
        MySQK Driver : MySQL 연동 라이브러리
        <추후에 계속적으로 추가>

        - build.gradle 에 Dependencies  추가

    - 프로젝트 폴더 구성
        프로젝트명
            .gradle : build.gradle에 빌드파일[임시파일]
            .idea : 인텔리제이 셋팅파일[임시파일]
            build : JVM 빌드시 생성한 바이트 파일[임시파일]
            gradle : gradle 라이브러리 파일
            *****src : 개발자 코드 작성하는 공간
                main
                        java        : 백엔드
                        resources   : 프론트엔드[정적파일(html,css,js,img 등등)]
                            - static
                                css/js/img 등등
                            - templates
                            **** - application.proterties : 현재

            ****build.gradle : 라이브러리 자동 빌드해주는 작성코드 파일
    - 스프링 실행
                준비물
                - main 함수 1개 필요 [ 스프링을 작동할 스레드 1개 필요 ]
                1. 클래스 1개 생성 [ 스프링 실행하는 클래스 이므로 모든 소스파일의 최상위 위치 ]
                2. 클래스 상단
                    @SpringBootApplication 주입
                3. main 선언
                    SpringApplication.run(현재클래스명.class);

    - 어노테이션
    1. 스프링
            @SpringBootApplication   스프링부트 실행 관련 제공
            @ServletComponentScan   서블릿을 찾아서 컨테이너에 빈 등록
            @Autowired              컨테이너에 빈 찾아서 객체 주입
    2. MVC
            @Controller             해당 클래스를 controller 사용 주입 [ 컨테이너 빈 등록 ]
            @RestController         해당 클래스를 controller 사용 주입 [ 컨테이너 빈 등록 ] + @ResponseBody
            @ResponceBody           해당 Mapping 함수들의 response 반환 타입을 자동으로 설정
            @RequestMapping         해당 함수/클래스를 매핑
            @GetMappping            HTTP 요청 GET 함수 매핑
            @PostMapping            HTTP 요청 POST 함수 매핑
            @PutMappping            HTTP 요청 PUT 함수 매핑
            @DeleteMappping         HTTP 요청 DELETE 함수 매핑
            @Service                해당 클래스를 service 사용 주입 [ 컨테이너에 빈 등록 ]
            @Component              해당 클래스 컨테이너에 빈 등록
                @RequestParam       쿼리스트링 형식의 요청 매개변수 매핑            URL?매개변수=값?매개변수=값
                @RequestBody        HTTP body(post , put) 형식의 요청 매개변수를 객체 매핑(get, delete 에서는 안씀)
                - @ModelAttribute     쿼리스트링 형식의 요청 매개변수를 객체로 매핑
                - @PathVariable       경로상의 매개변수 형식의 요청 매개변수 매핑      URL/값/값
    3. lombok
            @NoArgsConstruct        빈생성자 자동생성
            @AllArgsConstruct       풀생성자 자동생성
            @Getter                 필드에 getter 메소드 자동 생성
            @Setter                 필드에 setter 메소드 자동 생성
            @ToString               필드에 toString 메소드 자동 생성
            @Builder                빌더패턴 [유연하게 (생성자 단점보완) 객체 생성 도와주는 함수 제공]


    4. JPA

        패러다임=(방식/체계/규정/틀)
        ORM( = Object Relational Mapping ) : 객체 관계 매핑
        - 객체 지향 프로그래밍 : 객체들간의 상호 작용을 통한 프로그래밍
        - 관계형 데이터베이스 : 열/행의 테이블/관계로 데이터를 저장하는 방식
        + 관계형 데이터베이스를 객체지향으로 매핑 사용

        JPA : JAVA Persistence api : ORM 패러다임으로 만들어진 라이브러리

        엔티티클래스 = 테이블
        엔티티(객체) = 레코드

    1. 그레이들에 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    - 스프링 실행시 DB연동
    - 경로 오류[ 1. 경로 셋팅 안함 2. 경로에 오타 등 ]
        Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.
    2. JPA 옵션 세팅
        -application.properties에서 코드 작성
        --연동에 필요한 필수 코드
        #spring.datasource.driverClassName = DBMS 드라이버 이름[각 회사마다 상이]
        #spring.datasource.url =연공할 데이터베이스 경로
        #spring.datasource.username=계정명
        #spring.datasource.password=DB계정 패스워드
        ----
        #spring.jpa.hibernate.ddl-auto = create sql ddl 자동생성
            create : 만약에 매핑된 엔티티가 실제 DB에 없으면/있어도 새로 테이블 생성
            update : 만약에 매핑된 엔티티가 실제 DB에 없으면 새로운 테이블 생성
                     만약에 매핑된 엔티티가 실제 DB에 있으면 테이블의 변경이 있으면 수정

     3. 엔티티(객체)
            1. 엔티티 생성시 필수
                1.@Entity
                2.@ID
            2. 필드 선언 [ MTSQL 과 JAVA 타입 변환 ]

     4. 엔티티 조작[인터페이스]
        -JPARepository
            1 기본적인 CRUD 해당하는 SQL 지원
            2 선언방법 @Repository
            3 public interface 인터페이스명 extends JpaRepository< 조작할 , >
                - 조작할떄 pk 필드로 식별하므로 각 엔티티별 pk 필드(@ID) 는

     5. 엔티티 인터페이스 사용처 [ 서비스에서만 사용 ( 가 MVC 별 역할 분담 )
        1. CRUD
            1. 인터페이스명.save(저장할 엔티티);
            2.
    - HTML 반환
        Resources 클래스 사용
        경로 :  return new ClassPathResource("templete